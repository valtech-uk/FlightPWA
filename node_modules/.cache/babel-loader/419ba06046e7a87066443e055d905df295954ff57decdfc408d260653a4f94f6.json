{"ast":null,"code":"import authenticatorMetadata from './authenticatorMetadata.js'; //assert {type: 'json'}\nimport * as utils from './utils.js';\nexport function parseAuthBuffer(authData) {\n  console.debug(authData);\n  let flags = new DataView(authData.slice(32, 33)).getUint8(0);\n  console.debug(flags);\n  // https://w3c.github.io/webauthn/#sctn-authenticator-data\n  let parsed = {\n    rpIdHash: utils.toBase64url(authData.slice(0, 32)),\n    flags: {\n      userPresent: !!(flags & 1),\n      //reserved1: !!(flags & 2),\n      userVerified: !!(flags & 4),\n      backupEligibility: !!(flags & 8),\n      backupState: !!(flags & 16),\n      //reserved2: !!(flags & 32),\n      attestedData: !!(flags & 64),\n      extensionsIncluded: !!(flags & 128)\n    },\n    counter: new DataView(authData.slice(33, 37)).getUint32(0, false) // Big-Endian!\n  };\n\n  if (authData.byteLength > 37) {\n    // registration contains additional data\n    const aaguid = extractAaguid(authData);\n    // https://w3c.github.io/webauthn/#attested-credential-data\n    //let credentialLength = new DataView(authData.slice(53,55)).getUint16(0, false) // Big-Endian!\n    parsed = {\n      ...parsed,\n      aaguid,\n      name: resolveAuthenticatorName(aaguid)\n      // credentialBytes, // bytes 53->55: credential length\n      // credentialId: utils.toBase64url(authData.slice(55, 55+credentialLength)),\n      //publicKey: until where? ...and it's encoded using a strange format, let's better avoid it\n      //extensions: starting where?\n    };\n  }\n\n  return parsed;\n}\nexport function extractAaguid(authData) {\n  return formatAaguid(authData.slice(37, 53)); // 16 bytes\n}\n\nfunction formatAaguid(buffer) {\n  let aaguid = utils.bufferToHex(buffer);\n  aaguid = aaguid.substring(0, 8) + '-' + aaguid.substring(8, 12) + '-' + aaguid.substring(12, 16) + '-' + aaguid.substring(16, 20) + '-' + aaguid.substring(20, 32);\n  return aaguid; // example: \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\"\n}\n\nexport function resolveAuthenticatorName(aaguid) {\n  const aaguidMetadata = updatedAuthenticatorMetadata ?? authenticatorMetadata; //await getAaguidMetadata()\n  return aaguidMetadata[aaguid]?.name;\n}\nlet updatedAuthenticatorMetadata = null;\n// List of AAGUIDs are encoded as JWT here: https://mds.fidoalliance.org/\nexport async function updateDevicesMetadata() {\n  // this function is rather resource intensive and time consuming\n  // therefore, the result is cached in local storage\n  const jwt = await (await fetch(\"https://mds.fidoalliance.org\")).text();\n  // the response is a JWT including all AAGUIDs and their metadata\n  console.debug(jwt);\n  // let us ignore the JWT verification, since this is solely for descriptive purposes, not signed data\n  const payload = jwt.split('.')[1].replaceAll('-', '+').replaceAll('_', '/');\n  const json = JSON.parse(atob(payload));\n  console.debug(json);\n  let aaguidMetadata = {};\n  for (const e of json.entries) {\n    if (!e.aaguid || !e.metadataStatement) continue;\n    aaguidMetadata[e.aaguid] = {\n      name: e.metadataStatement.description\n    };\n  }\n  console.debug(aaguidMetadata);\n  updatedAuthenticatorMetadata = aaguidMetadata;\n}","map":{"version":3,"names":["authenticatorMetadata","utils","parseAuthBuffer","authData","console","debug","flags","DataView","slice","getUint8","parsed","rpIdHash","toBase64url","userPresent","userVerified","backupEligibility","backupState","attestedData","extensionsIncluded","counter","getUint32","byteLength","aaguid","extractAaguid","name","resolveAuthenticatorName","formatAaguid","buffer","bufferToHex","substring","aaguidMetadata","updatedAuthenticatorMetadata","updateDevicesMetadata","jwt","fetch","text","payload","split","replaceAll","json","JSON","parse","atob","e","entries","metadataStatement","description"],"sources":["C:/Users/brandon.murphy/source/repos/FlightPWA/node_modules/@passwordless-id/webauthn/dist/esm/authenticators.js"],"sourcesContent":["import authenticatorMetadata from './authenticatorMetadata.js'; //assert {type: 'json'}\nimport * as utils from './utils.js';\nexport function parseAuthBuffer(authData) {\n    console.debug(authData);\n    let flags = new DataView(authData.slice(32, 33)).getUint8(0);\n    console.debug(flags);\n    // https://w3c.github.io/webauthn/#sctn-authenticator-data\n    let parsed = {\n        rpIdHash: utils.toBase64url(authData.slice(0, 32)),\n        flags: {\n            userPresent: !!(flags & 1),\n            //reserved1: !!(flags & 2),\n            userVerified: !!(flags & 4),\n            backupEligibility: !!(flags & 8),\n            backupState: !!(flags & 16),\n            //reserved2: !!(flags & 32),\n            attestedData: !!(flags & 64),\n            extensionsIncluded: !!(flags & 128)\n        },\n        counter: new DataView(authData.slice(33, 37)).getUint32(0, false), // Big-Endian!\n    };\n    if (authData.byteLength > 37) {\n        // registration contains additional data\n        const aaguid = extractAaguid(authData);\n        // https://w3c.github.io/webauthn/#attested-credential-data\n        //let credentialLength = new DataView(authData.slice(53,55)).getUint16(0, false) // Big-Endian!\n        parsed = {\n            ...parsed,\n            aaguid,\n            name: resolveAuthenticatorName(aaguid)\n            // credentialBytes, // bytes 53->55: credential length\n            // credentialId: utils.toBase64url(authData.slice(55, 55+credentialLength)),\n            //publicKey: until where? ...and it's encoded using a strange format, let's better avoid it\n            //extensions: starting where?\n        };\n    }\n    return parsed;\n}\nexport function extractAaguid(authData) {\n    return formatAaguid(authData.slice(37, 53)); // 16 bytes\n}\nfunction formatAaguid(buffer) {\n    let aaguid = utils.bufferToHex(buffer);\n    aaguid = aaguid.substring(0, 8) + '-' + aaguid.substring(8, 12) + '-' + aaguid.substring(12, 16) + '-' + aaguid.substring(16, 20) + '-' + aaguid.substring(20, 32);\n    return aaguid; // example: \"d41f5a69-b817-4144-a13c-9ebd6d9254d6\"\n}\nexport function resolveAuthenticatorName(aaguid) {\n    const aaguidMetadata = updatedAuthenticatorMetadata ?? authenticatorMetadata; //await getAaguidMetadata()\n    return aaguidMetadata[aaguid]?.name;\n}\nlet updatedAuthenticatorMetadata = null;\n// List of AAGUIDs are encoded as JWT here: https://mds.fidoalliance.org/\nexport async function updateDevicesMetadata() {\n    // this function is rather resource intensive and time consuming\n    // therefore, the result is cached in local storage\n    const jwt = await (await fetch(\"https://mds.fidoalliance.org\")).text();\n    // the response is a JWT including all AAGUIDs and their metadata\n    console.debug(jwt);\n    // let us ignore the JWT verification, since this is solely for descriptive purposes, not signed data\n    const payload = jwt.split('.')[1].replaceAll('-', '+').replaceAll('_', '/');\n    const json = JSON.parse(atob(payload));\n    console.debug(json);\n    let aaguidMetadata = {};\n    for (const e of json.entries) {\n        if (!e.aaguid || !e.metadataStatement)\n            continue;\n        aaguidMetadata[e.aaguid] = { name: e.metadataStatement.description };\n    }\n    console.debug(aaguidMetadata);\n    updatedAuthenticatorMetadata = aaguidMetadata;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}